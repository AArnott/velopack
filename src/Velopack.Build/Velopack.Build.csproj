<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net472;net6.0</TargetFrameworks>
    <Nullable>enable</Nullable>
    <LangVersion>12</LangVersion>
    <SignAssembly>false</SignAssembly>
    <!-- https://learn.microsoft.com/dotnet/core/project-sdk/msbuild-props?WT.mc_id=DT-MVP-5003472#copylocallockfileassemblies -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <NoWarn>$(NoWarn);NU5128</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Improve devloop by clearing this package from NuGet cache before building -->
    <HttpNuGetCache>$(LocalAppData)\NuGet\v3-cache</HttpNuGetCache>
    <CleanHttpNuGetCacheOnPack Condition="'$(CleanHttpNuGetCacheOnPack)' == ''">true</CleanHttpNuGetCacheOnPack>
    <NuGetCache>$(UserProfile)\.nuget\packages</NuGetCache>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Include all project/package dependencies in produced NuGet package -->
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);IncludeTfmDependenciesInPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <PropertyGroup>
    <Title>Velopack.Build</Title>
    <Description>Velopack.Build</Description>
    <PackageId>Velopack.Build</PackageId>
    <PackageIcon>Velopack_200.png</PackageIcon>
    <PackageReadmeFile>README_NUGET.md</PackageReadmeFile>
    <Description>Quick and easy installer and automatic updates for cross-platform desktop applications</Description>
    <DevelopmentDependency>true</DevelopmentDependency>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <RepositoryUrl>https://github.com/velopack/velopack</RepositoryUrl>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Velopack.Packaging.Unix\Velopack.Packaging.Unix.csproj" PrivateAssets="all" />
    <ProjectReference Include="..\Velopack.Packaging.Windows\Velopack.Packaging.Windows.csproj" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="17.9.5" PrivateAssets="all" />
    <PackageReference Include="Riok.Mapperly" Version="3.3.0" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\artwork\Velopack_200.png" Pack="true" PackagePath="/" />
    <None Include="..\..\README_NUGET.md" Pack="true" PackagePath="/" />
    <None Include="Velopack.Build.targets" Pack="true" PackagePath="build/Velopack.Build.targets" />
  </ItemGroup>

  <ItemGroup Condition=" $([System.OperatingSystem]::IsWindows()) or '$(PackRustAssets)' == 'true' ">
    <None Include="..\Rust\target\release\update.exe" Pack="true" PackagePath="vendor" />
    <None Include="..\Rust\target\release\setup.exe" Pack="true" PackagePath="vendor" />
    <None Include="..\Rust\target\release\stub.exe" Pack="true" PackagePath="vendor" />
    <None Include="..\..\vendor\rcedit.exe" Pack="true" PackagePath="vendor" />
    <None Include="..\..\vendor\zstd.exe" Pack="true" PackagePath="vendor" />
    <None Include="..\..\vendor\signtool.exe" Pack="true" PackagePath="vendor" />
  </ItemGroup>

  <ItemGroup Condition=" $([System.OperatingSystem]::IsMacOS()) or '$(PackRustAssets)' == 'true' ">
    <None Include="..\Rust\target\release\UpdateMac" Pack="true" PackagePath="vendor" />
    <None Include="..\..\Velopack.entitlements" Pack="true" PackagePath="vendor" />
    <None Include="..\..\artwork\DefaultApp.icns" Pack="true" PackagePath="vendor" />
  </ItemGroup>

  <ItemGroup Condition=" $([System.OperatingSystem]::IsLinux()) or '$(PackRustAssets)' == 'true' ">
    <None Include="..\Rust\target\release\UpdateNix" Pack="true" PackagePath="vendor" />
    <None Include="..\..\vendor\appimagetool-x86_64.AppImage" Pack="true" PackagePath="vendor" />
    <None Include="..\..\artwork\DefaultApp_64.png" Pack="true" PackagePath="vendor" />
  </ItemGroup>

  <Target Name="IncludeTfmDependenciesInPackage">
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(TargetDir)*.*">
        <PackagePath>build\$(TargetFramework)</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="CleanPackageOutput" BeforeTargets="Build">
    <ItemGroup>
      <_ExistingPackage Include="$(PackageOutputPath)\$(PackageId)*.nupkg" />
      <_PackageToDelete Include="@(_ExistingPackage)"
                        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(Filename)', '$(PackageId)\.\d\.\d\.\d.*'))" />
    </ItemGroup>
    <Delete Files="@(_PackageToDelete)" ContinueOnError="true">
      <Output TaskParameter="DeletedFiles" ItemName="_CleanedPackages" />
    </Delete>
    <Message Text="Cleaned existing packages: @(_CleanedPackages -> '%(Filename)%(Extension)')"
             Condition="'@(_CleanedPackages)' != ''" />
  </Target>

  <Target Name="CleanCachedPackageId" AfterTargets="Build;Pack">
    <PropertyGroup>
      <PackageFolder>$(NuGetCache)\$(PackageId.ToLowerInvariant())</PackageFolder>
    </PropertyGroup>

    <Message Text="Cleaning $(PackageFolder)" Condition="Exists($(PackageFolder))" />
    <Exec Command='rd "$(PackageFolder)" /q /s' Condition="Exists($(PackageFolder)) and '$(OS)' == 'Windows_NT'" />
    <Exec Command='rm -rf "$(PackageFolder)"' Condition="Exists($(PackageFolder)) and '$(OS)' != 'Windows_NT'" />
  </Target>

  <Target Name="CleanHttpNuGetCache"
          Condition="'$(CleanHttpNuGetCacheOnPack)' == 'true' and Exists('$(HttpNuGetCache)')"
          AfterTargets="Build;Pack">
    <Message Text="Cleaning $(HttpNuGetCache)" />
    <Exec Command='rd "$(HttpNuGetCache)" /q /s' Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command='rm -rf "$(HttpNuGetCache)"' Condition="'$(OS)' != 'Windows_NT'" />
  </Target>

</Project>